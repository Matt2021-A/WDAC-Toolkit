//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WDAC_Wizard.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WDAC_Wizard.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The F8 preboot menu is disabled by default. Setting this rule option allows the F8 menu to appear to physically present users..
        /// </summary>
        internal static string AdvancedBootOpts_Info {
            get {
                return ResourceManager.GetString("AdvancedBootOpts_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap back {
            get {
                object obj = ResourceManager.GetObject("back", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap blank_check_box {
            get {
                object obj = ResourceManager.GetObject("blank_check_box", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap blank_check_box_32 {
            get {
                object obj = ResourceManager.GetObject("blank-check-box_32", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used when the WDAC policy is in enforcement mode. When a driver fails during startup, the WDAC policy will be placed in audit mode so that Windows will load..
        /// </summary>
        internal static string BootAudit_Info {
            get {
                return ResourceManager.GetString("BootAudit_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cancel {
            get {
                object obj = ResourceManager.GetObject("cancel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cctv {
            get {
                object obj = ResourceManager.GetObject("cctv", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap check_box_checked {
            get {
                object obj = ResourceManager.GetObject("check-box-checked", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap check_box_checked_32 {
            get {
                object obj = ResourceManager.GetObject("check_box_checked_32", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap check_box_unchecked {
            get {
                object obj = ResourceManager.GetObject("check-box-unchecked", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap circular_shape_silhouette {
            get {
                object obj = ResourceManager.GetObject("circular_shape_silhouette", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;SiPolicy xmlns=&quot;urn:schemas-microsoft-com:sipolicy&quot;&gt;
        ///  &lt;VersionEx&gt;10.0.1.0&lt;/VersionEx&gt;
        ///  &lt;PolicyID&gt;{A244370E-44C9-4C06-B551-F6016E563076}&lt;/PolicyID&gt;
        ///  &lt;BasePolicyID&gt;{A244370E-44C9-4C06-B551-F6016E563076}&lt;/BasePolicyID&gt;
        ///  &lt;PlatformID&gt;{2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}&lt;/PlatformID&gt;
        ///  &lt;Rules&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Unsigned System Integrity Policy&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Advanced Boot Options Menu&lt;/Option&gt;
        ///    &lt;/Rul [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DefaultWindows_Enforced {
            get {
                return ResourceManager.GetString("DefaultWindows_Enforced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables policy enforcement for .NET applications and DLLs..
        /// </summary>
        internal static string DynamicSecurity_Info {
            get {
                return ResourceManager.GetString("DynamicSecurity_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate.
        /// </summary>
        internal static string EVSigners_Info {
            get {
                return ResourceManager.GetString("EVSigners_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap external_link_symbol {
            get {
                object obj = ResourceManager.GetObject("external-link-symbol", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap external_link_symbol_highlight {
            get {
                object obj = ResourceManager.GetObject("external-link-symbol-highlight", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap externalLink {
            get {
                object obj = ResourceManager.GetObject("externalLink", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, WDAC policies will not trust flightroot-signed binaries. This would be used in the scenario in which organizations only want to run released binaries, not flighted builds..
        /// </summary>
        internal static string FlightSigning_Info {
            get {
                return ResourceManager.GetString("FlightSigning_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap gear {
            get {
                object obj = ResourceManager.GetObject("gear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap house {
            get {
                object obj = ResourceManager.GetObject("house", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If enabled, the code integrity service runs in a hypervisor-protected container..
        /// </summary>
        internal static string HVCI_Info {
            get {
                return ResourceManager.GetString("HVCI_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Turning this off will disable default FilePath rule protection of enforcing user-writeability and only allowing admin-writeable locations..
        /// </summary>
        internal static string InvalidateEAs_Info {
            get {
                return ResourceManager.GetString("InvalidateEAs_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this option to automatically allow applications with known good reputation as defined by Microsoft’s Intelligent Security Graph (ISG)..
        /// </summary>
        internal static string ISG_Info {
            get {
                return ResourceManager.GetString("ISG_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap locked_padlock {
            get {
                object obj = ResourceManager.GetObject("locked_padlock", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this option to automatically allow applications installed by a software distribution solution, such as SCCM..
        /// </summary>
        internal static string ManagedInst_Info {
            get {
                return ResourceManager.GetString("ManagedInst_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap merge {
            get {
                object obj = ResourceManager.GetObject("merge", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap minus {
            get {
                object obj = ResourceManager.GetObject("minus", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap minus_button {
            get {
                object obj = ResourceManager.GetObject("minus-button", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap newPolicy {
            get {
                object obj = ResourceManager.GetObject("newPolicy", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap newPolicy1 {
            get {
                object obj = ResourceManager.GetObject("newPolicy1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap next {
            get {
                object obj = ResourceManager.GetObject("next", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap next_256px {
            get {
                object obj = ResourceManager.GetObject("next_256px", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;SiPolicy xmlns=&quot;urn:schemas-microsoft-com:sipolicy&quot; PolicyType=&quot;Base Policy&quot;&gt;
        ///  &lt;VersionEx&gt;10.0.0.0&lt;/VersionEx&gt;
        ///  &lt;PlatformID&gt;{2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}&lt;/PlatformID&gt;
        ///  &lt;Rules&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Unsigned System Integrity Policy&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Advanced Boot Options Menu&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:UMCI&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Inherit D [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NightsWatch {
            get {
                return ResourceManager.GetString("NightsWatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this option to allow future WDAC policy updates to apply without requiring a system reboot..
        /// </summary>
        internal static string NoReboot_Info {
            get {
                return ResourceManager.GetString("NoReboot_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap not_extendable {
            get {
                object obj = ResourceManager.GetObject("not-extendable", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap office {
            get {
                object obj = ResourceManager.GetObject("office", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap question_sign1 {
            get {
                object obj = ResourceManager.GetObject("question_sign1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap radio_off_button {
            get {
                object obj = ResourceManager.GetObject("radio-off-button", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap radio_on_button {
            get {
                object obj = ResourceManager.GetObject("radio-on-button", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Turning this off will disable default FilePath rule protection of enforcing user-writeability and only allowing admin-writeable locations..
        /// </summary>
        internal static string RuntimeRules {
            get {
                return ResourceManager.GetString("RuntimeRules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Turning this option off will disable script enforcement options. Unsigned PowerShell scripts and interactive PowerShell are no longer restricted to Restricted Language Mode..
        /// </summary>
        internal static string ScriptEnforcement_Info {
            get {
                return ResourceManager.GetString("ScriptEnforcement_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap shield {
            get {
                object obj = ResourceManager.GetObject("shield", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this rule option is enabled, WDAC policies will also apply to Universal Windows applications..
        /// </summary>
        internal static string StoreApps_Info {
            get {
                return ResourceManager.GetString("StoreApps_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this option on a base policy to allow supplemental policies to expand it..
        /// </summary>
        internal static string SuppPolicies_Info {
            get {
                return ResourceManager.GetString("SuppPolicies_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WDACWizard\Temp\BaseTemplates\.
        /// </summary>
        internal static string TemplatePath {
            get {
                return ResourceManager.GetString("TemplatePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap toggle {
            get {
                object obj = ResourceManager.GetObject("toggle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap toggle_lg {
            get {
                object obj = ResourceManager.GetObject("toggle_lg", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap tools {
            get {
                object obj = ResourceManager.GetObject("tools", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabling this rule option validates user mode executables and scripts..
        /// </summary>
        internal static string UMCI_Info {
            get {
                return ResourceManager.GetString("UMCI_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows the policy to remain unsigned. When this option is removed, the policy must be signed..
        /// </summary>
        internal static string UnsignedPolicy_Info {
            get {
                return ResourceManager.GetString("UnsignedPolicy_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This option is not currently supported ....
        /// </summary>
        internal static string UnsupportedRule_Info {
            get {
                return ResourceManager.GetString("UnsupportedRule_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap untoggle {
            get {
                object obj = ResourceManager.GetObject("untoggle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap untoggle_lg {
            get {
                object obj = ResourceManager.GetObject("untoggle_lg", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap verified {
            get {
                object obj = ResourceManager.GetObject("verified", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_close {
            get {
                object obj = ResourceManager.GetObject("white_close", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_draft {
            get {
                object obj = ResourceManager.GetObject("white_draft", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_expand {
            get {
                object obj = ResourceManager.GetObject("white_expand", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_merge {
            get {
                object obj = ResourceManager.GetObject("white_merge", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_minimize {
            get {
                object obj = ResourceManager.GetObject("white_minimize", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_right_arrow {
            get {
                object obj = ResourceManager.GetObject("white_right_arrow", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap white_view {
            get {
                object obj = ResourceManager.GetObject("white_view", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabling this rule requires that every executed driver is WHQL signed and removes legacy driver support..
        /// </summary>
        internal static string WHQL_Info {
            get {
                return ResourceManager.GetString("WHQL_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap windows_10s_logo {
            get {
                object obj = ResourceManager.GetObject("windows_10s_logo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap windows_logo {
            get {
                object obj = ResourceManager.GetObject("windows_logo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;SiPolicy xmlns=&quot;urn:schemas-microsoft-com:sipolicy&quot; FriendlyName=&quot;Windows 10 S Lockdown Policy&quot; PolicyType=&quot;Base Policy&quot;&gt;
        ///  &lt;VersionEx&gt;10.0.15039.0&lt;/VersionEx&gt;
        ///  &lt;PlatformID&gt;{2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}&lt;/PlatformID&gt;
        ///  &lt;PolicyID&gt;{5951A96A-E0B5-4D3D-8FB8-3E5B61030784}&lt;/PolicyID&gt;
        ///  &lt;BasePolicyID&gt;{5951A96A-E0B5-4D3D-8FB8-3E5B61030784}&lt;/BasePolicyID&gt;
        ///  &lt;Rules&gt;
        ///    &lt;Rule&gt;
        ///      &lt;Option&gt;Enabled:Advanced Boot Options Menu&lt;/Option&gt;
        ///    &lt;/Rule&gt;
        ///    &lt;Rule&gt;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WinSiPolicy {
            get {
                return ResourceManager.GetString("WinSiPolicy", resourceCulture);
            }
        }
    }
}
